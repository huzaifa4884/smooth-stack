// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transactions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transactions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transactions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transactions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transactions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transactions_2eproto;
namespace models {
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class Transactions;
struct TransactionsDefaultTypeInternal;
extern TransactionsDefaultTypeInternal _Transactions_default_instance_;
}  // namespace models
PROTOBUF_NAMESPACE_OPEN
template<> ::models::Transaction* Arena::CreateMaybeMessage<::models::Transaction>(Arena*);
template<> ::models::Transactions* Arena::CreateMaybeMessage<::models::Transactions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace models {

enum Transaction_TransactionType : int {
  Transaction_TransactionType_DEBIT = 0,
  Transaction_TransactionType_CREDIT = 1
};
bool Transaction_TransactionType_IsValid(int value);
constexpr Transaction_TransactionType Transaction_TransactionType_TransactionType_MIN = Transaction_TransactionType_DEBIT;
constexpr Transaction_TransactionType Transaction_TransactionType_TransactionType_MAX = Transaction_TransactionType_CREDIT;
constexpr int Transaction_TransactionType_TransactionType_ARRAYSIZE = Transaction_TransactionType_TransactionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_TransactionType_descriptor();
template<typename T>
inline const std::string& Transaction_TransactionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transaction_TransactionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transaction_TransactionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Transaction_TransactionType_descriptor(), enum_t_value);
}
inline bool Transaction_TransactionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Transaction_TransactionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Transaction_TransactionType>(
    Transaction_TransactionType_descriptor(), name, value);
}
// ===================================================================

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:models.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "models.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Transaction_TransactionType TransactionType;
  static constexpr TransactionType DEBIT =
    Transaction_TransactionType_DEBIT;
  static constexpr TransactionType CREDIT =
    Transaction_TransactionType_CREDIT;
  static inline bool TransactionType_IsValid(int value) {
    return Transaction_TransactionType_IsValid(value);
  }
  static constexpr TransactionType TransactionType_MIN =
    Transaction_TransactionType_TransactionType_MIN;
  static constexpr TransactionType TransactionType_MAX =
    Transaction_TransactionType_TransactionType_MAX;
  static constexpr int TransactionType_ARRAYSIZE =
    Transaction_TransactionType_TransactionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TransactionType_descriptor() {
    return Transaction_TransactionType_descriptor();
  }
  template<typename T>
  static inline const std::string& TransactionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TransactionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TransactionType_Name.");
    return Transaction_TransactionType_Name(enum_t_value);
  }
  static inline bool TransactionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TransactionType* value) {
    return Transaction_TransactionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // required string account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // required .models.Transaction.TransactionType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::models::Transaction_TransactionType type() const;
  void set_type(::models::Transaction_TransactionType value);
  private:
  ::models::Transaction_TransactionType _internal_type() const;
  void _internal_set_type(::models::Transaction_TransactionType value);
  public:

  // required int32 amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  int32_t amount() const;
  void set_amount(int32_t value);
  private:
  int32_t _internal_amount() const;
  void _internal_set_amount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:models.Transaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  int type_;
  int32_t amount_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class Transactions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:models.Transactions) */ {
 public:
  inline Transactions() : Transactions(nullptr) {}
  ~Transactions() override;
  explicit constexpr Transactions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transactions(const Transactions& from);
  Transactions(Transactions&& from) noexcept
    : Transactions() {
    *this = ::std::move(from);
  }

  inline Transactions& operator=(const Transactions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transactions& operator=(Transactions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transactions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transactions* internal_default_instance() {
    return reinterpret_cast<const Transactions*>(
               &_Transactions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transactions& a, Transactions& b) {
    a.Swap(&b);
  }
  inline void Swap(Transactions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transactions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transactions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transactions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transactions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transactions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transactions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "models.Transactions";
  }
  protected:
  explicit Transactions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // repeated .models.Transaction transaction = 1;
  int transaction_size() const;
  private:
  int _internal_transaction_size() const;
  public:
  void clear_transaction();
  ::models::Transaction* mutable_transaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::models::Transaction >*
      mutable_transaction();
  private:
  const ::models::Transaction& _internal_transaction(int index) const;
  ::models::Transaction* _internal_add_transaction();
  public:
  const ::models::Transaction& transaction(int index) const;
  ::models::Transaction* add_transaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::models::Transaction >&
      transaction() const;

  // @@protoc_insertion_point(class_scope:models.Transactions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::models::Transaction > transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// required string account = 1;
inline bool Transaction::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transaction::has_account() const {
  return _internal_has_account();
}
inline void Transaction::clear_account() {
  account_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transaction::account() const {
  // @@protoc_insertion_point(field_get:models.Transaction.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_account(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:models.Transaction.account)
}
inline std::string* Transaction::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:models.Transaction.account)
  return _s;
}
inline const std::string& Transaction::_internal_account() const {
  return account_.Get();
}
inline void Transaction::_internal_set_account(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction::release_account() {
  // @@protoc_insertion_point(field_release:models.Transaction.account)
  if (!_internal_has_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = account_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transaction::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:models.Transaction.account)
}

// required .models.Transaction.TransactionType type = 2;
inline bool Transaction::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transaction::has_type() const {
  return _internal_has_type();
}
inline void Transaction::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::models::Transaction_TransactionType Transaction::_internal_type() const {
  return static_cast< ::models::Transaction_TransactionType >(type_);
}
inline ::models::Transaction_TransactionType Transaction::type() const {
  // @@protoc_insertion_point(field_get:models.Transaction.type)
  return _internal_type();
}
inline void Transaction::_internal_set_type(::models::Transaction_TransactionType value) {
  assert(::models::Transaction_TransactionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Transaction::set_type(::models::Transaction_TransactionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:models.Transaction.type)
}

// required int32 amount = 3;
inline bool Transaction::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Transaction::has_amount() const {
  return _internal_has_amount();
}
inline void Transaction::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Transaction::_internal_amount() const {
  return amount_;
}
inline int32_t Transaction::amount() const {
  // @@protoc_insertion_point(field_get:models.Transaction.amount)
  return _internal_amount();
}
inline void Transaction::_internal_set_amount(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  amount_ = value;
}
inline void Transaction::set_amount(int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:models.Transaction.amount)
}

// -------------------------------------------------------------------

// Transactions

// repeated .models.Transaction transaction = 1;
inline int Transactions::_internal_transaction_size() const {
  return transaction_.size();
}
inline int Transactions::transaction_size() const {
  return _internal_transaction_size();
}
inline void Transactions::clear_transaction() {
  transaction_.Clear();
}
inline ::models::Transaction* Transactions::mutable_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:models.Transactions.transaction)
  return transaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::models::Transaction >*
Transactions::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable_list:models.Transactions.transaction)
  return &transaction_;
}
inline const ::models::Transaction& Transactions::_internal_transaction(int index) const {
  return transaction_.Get(index);
}
inline const ::models::Transaction& Transactions::transaction(int index) const {
  // @@protoc_insertion_point(field_get:models.Transactions.transaction)
  return _internal_transaction(index);
}
inline ::models::Transaction* Transactions::_internal_add_transaction() {
  return transaction_.Add();
}
inline ::models::Transaction* Transactions::add_transaction() {
  ::models::Transaction* _add = _internal_add_transaction();
  // @@protoc_insertion_point(field_add:models.Transactions.transaction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::models::Transaction >&
Transactions::transaction() const {
  // @@protoc_insertion_point(field_list:models.Transactions.transaction)
  return transaction_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace models

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::models::Transaction_TransactionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::models::Transaction_TransactionType>() {
  return ::models::Transaction_TransactionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transactions_2eproto
